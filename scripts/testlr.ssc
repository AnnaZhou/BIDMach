:silent
val dir="../data/rcv1/"

val a = loadSMat(dir + "docs.smat.lz4")
val ta = loadSMat(dir + "testdocs.smat.lz4")
val c = loadFMat(dir + "cats.fmat.lz4")
val tc = loadFMat(dir + "testcats.fmat.lz4")

val pc = zeros(tc.nrows, tc.ncols)
val dim = 2000

// val amap = (rand(2000, a.nrows) < sqrt(row(100 until (100 + a.nrows))/a.nrows)/5)
println("generating amap")
/* val amap = zeros(dim, a.nrows);
var i = 0
while (i < a.nrows) {
val p = randperm(dim).t
amap(?,i) = (FMat(p) < 1f)
i += 1
}
println("applying amap")
val aa = amap * a
val taa = amap * ta */

val (nn,opts,mm,mopts)=GLM.learner(a,c,ta,pc,1)

opts.batchSize=20000
mopts.batchSize=20000
//opts.npasses=3
opts.reg1weight = 0.01
opts.links = iones(103,1)
opts.addConstFeat=true;
mopts.addConstFeat=true;

//val dd = mkdiag(ones(103,1));
//val tmap = dd on dd on dd on dd

//opts.targmap = tmap
//mopts.targmap = opts.targmap
mopts.links = opts.links

//opts.useGPU=false
//mopts.useGPU=false

nn.train
mm.predict

//val tc2= tmap * tc
val rc = roc2(pc, tc, 1-tc, 1000)
:silent
println("roc6 = %5.4f, roc mean = %5.4f" format (mean(rc)(6), mean(mean(rc)(0->100)).v))
